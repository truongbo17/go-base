definitions:
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.RefreshRequest:
    properties:
      token:
        type: string
    type: object
  request.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  response.BaseResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      request_id:
        type: string
      status:
        type: boolean
      status_code:
        type: integer
    type: object
  response.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.UserInfo:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.UserRegisterResponse:
    properties:
      token:
        $ref: '#/definitions/response.Token'
      user:
        $ref: '#/definitions/response.UserInfo'
    type: object
info:
  contact:
    email: truongnq017@gmail.com
    name: Nguyen Quang Truong
    url: https://github.com/truongbo17
  description: Go-Gin-Base quickly build and develop web applications. restful API,
    microservice.
  title: Go Gin Base
  version: v0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login a user
      parameters:
      - description: Login Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - Authorization: []
      summary: Me
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: refreshes a user token
      parameters:
      - description: Refresh Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: registers a user
      parameters:
      - description: Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Register
      tags:
      - auth
  /ping:
    get:
      consumes:
      - application/json
      description: Responds with "pong" and the request ID.
      produces:
      - text/plain
      responses:
        "200":
          description: 'pong: <x-request-id>'
          schema:
            type: string
      summary: Ping endpoint
      tags:
      - Public APi
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
